{"version":3,"sources":["Circle.js","App.js","serviceWorker.js","index.js"],"names":["Circle","type","r","act","length","className","Array","from","map","x","index","i","key","toLowerCase","style","transformOrigin","transform","App","state","hour","minute","second","setInterval","time","Date","setState","getHours","getMinutes","getSeconds","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6OA4BeA,MA1Bf,YAAiC,IAAhBC,EAAe,EAAfA,KAAMC,EAAS,EAATA,EAAGC,EAAM,EAANA,IAEpBC,EAAkB,OAATH,EAAe,GAAI,GAIhC,OACE,yBAAKI,UAAU,UACZC,MAAMC,KAAK,CAACH,WAASI,KAAI,SAACC,EAAIC,GAC7B,IAAIC,EAAID,EAAQ,EAAR,WAAeA,EAAM,GAArB,UAA6BA,EAAM,GAC3C,OACE,yBAAKE,IAAKF,EACVL,UAAS,eAAUF,IAAQO,EAAM,EAAI,SAAW,GAAvC,YAA6CP,IAAQO,EAAM,EAAIT,EAAKY,cAAgB,IAC7FC,MACA,CACEC,gBAAgB,IAAD,OAAMb,EAAN,UACfc,UAAU,cAAD,OAAgBd,EAAhB,sBAA+BQ,GAAO,IAAIN,GAAW,IAAIA,GAASD,EAAI,GAAtE,UAERQ,QCmBEM,G,MAnCf,YAEE,aAAc,IAAD,8BACX,+CACKC,MAAS,CACZC,KAAM,EACNC,OAAQ,EACRC,OAAQ,GALC,EAFf,kFAWuB,IAAD,OAClBC,aAAY,WACV,IAAIC,EAAO,IAAIC,KAEf,EAAKC,SAAS,CACZN,KAAMI,EAAKG,WACXN,OAAQG,EAAKI,aACbN,OAAQE,EAAKK,iBAEd,OApBP,+BAwBI,OACE,yBAAKvB,UAAU,OACb,yBAAKA,UAAU,QAAf,uBACA,kBAAC,EAAD,CAAQJ,KAAK,KAAKC,EAAG,MAAMC,IAAK0B,KAAKX,MAAMC,OAC3C,kBAAC,EAAD,CAAQlB,KAAK,MAAMC,EAAG,MAAMC,IAAK0B,KAAKX,MAAME,SAC5C,kBAAC,EAAD,CAAQnB,KAAK,IAAIC,EAAG,MAAMC,IAAK0B,KAAKX,MAAMG,cA7BlD,GAAyBS,cCQLC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.c2546bb8.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction Circle({type, r, act}) {\r\n\r\n  let length = type === 'HR'? 24: 60\r\n\r\n  //array = length => Array.from({length}).map((v, k) => k).map(x=>x+1);\r\n\r\n  return (\r\n    <div className=\"circle\">\r\n      {Array.from({length}).map((x , index) => {\r\n        let i = index < 9? `0${index+1}`: `${index+1}`\r\n        return (\r\n          <div key={index}\r\n          className={`item ${act === index+1 ? 'active' : ''} ${act === index+1 ? type.toLowerCase() : ''}`}\r\n          style={\r\n          {\r\n            transformOrigin: `-${r}px 0px`,\r\n            transform: `translateX(${r}px) rotate(${index*(360/length) - (360/length)*(act-1)}deg)`,\r\n          }}>\r\n            {i}{/*{type.toLowerCase()}*/}\r\n          </div>\r\n        )\r\n      })}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Circle\r\n","import React, { Component } from 'react'\nimport Circle from './Circle'\nimport './App.css';\n\nexport class App extends Component {\n\n  constructor(){\n    super();\n    this.state = ({\n      hour: 1,\n      minute: 1,\n      second: 1\n    })\n  }\n\n  componentWillMount(){\n    setInterval(() => {\n      let time = new Date();\n\n      this.setState({\n        hour: time.getHours(),\n        minute: time.getMinutes(),\n        second: time.getSeconds(),\n      })\n    }, 1000);\n  }\n\n  render() {\n    return (\n      <div className=\"app\">\n        <div className=\"text\">TIME WAITS FOR NONE</div>\n        <Circle type=\"HR\" r =\"120\" act={this.state.hour}/>\n        <Circle type=\"MIN\" r =\"180\" act={this.state.minute}/>\n        <Circle type=\"S\" r =\"260\" act={this.state.second}/>\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}